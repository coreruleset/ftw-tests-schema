// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.
// DO NOT EDIT: this file is automatically generated by docgen
package overrides

import (
	"github.com/projectdiscovery/yamldoc-go/encoder"
)

var (
	FTWOverridesDoc encoder.Doc
	MetaDoc         encoder.Doc
	TestOverrideDoc encoder.Doc
	TESTOutputDoc   encoder.Doc
)

func init() {
	FTWOverridesDoc.Type = "FTWOverrides"
	FTWOverridesDoc.Comments[encoder.LineComment] = " TODO: Welcome to the FTW YAMLFormat documentation."
	FTWOverridesDoc.Description = "TODO: Welcome to the FTW YAMLFormat documentation.\n In this document we will explain all the possible options that can be used within the YAML format.\n Generally this is the preferred format for writing tests in as they don't require any programming skills\n in order to understand and change. If you find a bug in this format please open an issue.\n\n\n TODO: FTWTest is the base type used when unmarshaling YAML tests files"
	FTWOverridesDoc.Fields = make([]encoder.Doc, 3)
	FTWOverridesDoc.Fields[0].Name = "version"
	FTWOverridesDoc.Fields[0].Type = "string"
	FTWOverridesDoc.Fields[0].Note = ""
	FTWOverridesDoc.Fields[0].Description = "The version field designates the version of the schema that validates this file"
	FTWOverridesDoc.Fields[0].Comments[encoder.LineComment] = "The version field designates the version of the schema that validates this file"

	FTWOverridesDoc.Fields[0].AddExample("", "v0.1.0")
	FTWOverridesDoc.Fields[1].Name = "meta"
	FTWOverridesDoc.Fields[1].Type = "Meta"
	FTWOverridesDoc.Fields[1].Note = ""
	FTWOverridesDoc.Fields[1].Description = "Meta describes the metadata information"
	FTWOverridesDoc.Fields[1].Comments[encoder.LineComment] = "Meta describes the metadata information"

	FTWOverridesDoc.Fields[1].AddExample("", metaExample)
	FTWOverridesDoc.Fields[2].Name = "test_overrides"
	FTWOverridesDoc.Fields[2].Type = "[]TestOverride"
	FTWOverridesDoc.Fields[2].Note = ""
	FTWOverridesDoc.Fields[2].Description = "List of test override specifications"
	FTWOverridesDoc.Fields[2].Comments[encoder.LineComment] = "List of test override specifications"

	FTWOverridesDoc.Fields[2].AddExample("", testOverridesExample)

	MetaDoc.Type = "Meta"
	MetaDoc.Comments[encoder.LineComment] = ""
	MetaDoc.Description = ""

	MetaDoc.AddExample("", metaExample)
	MetaDoc.AppearsIn = []encoder.Appearance{
		{
			TypeName:  "FTWOverrides",
			FieldName: "meta",
		},
	}
	MetaDoc.Fields = make([]encoder.Doc, 3)
	MetaDoc.Fields[0].Name = "engine"
	MetaDoc.Fields[0].Type = "string"
	MetaDoc.Fields[0].Note = ""
	MetaDoc.Fields[0].Description = "The name of the WAF engine the tests are expected to run against"
	MetaDoc.Fields[0].Comments[encoder.LineComment] = "The name of the WAF engine the tests are expected to run against"

	MetaDoc.Fields[0].AddExample("", "coraza")
	MetaDoc.Fields[1].Name = "platform"
	MetaDoc.Fields[1].Type = "string"
	MetaDoc.Fields[1].Note = ""
	MetaDoc.Fields[1].Description = "The name of the platform (e.g., web server) the tests are expected to run against"
	MetaDoc.Fields[1].Comments[encoder.LineComment] = "The name of the platform (e.g., web server) the tests are expected to run against"

	MetaDoc.Fields[1].AddExample("", "nginx")
	MetaDoc.Fields[2].Name = "annotations"
	MetaDoc.Fields[2].Type = "map[string]string"
	MetaDoc.Fields[2].Note = ""
	MetaDoc.Fields[2].Description = "Custom annotations; can be used to add additional meta information"
	MetaDoc.Fields[2].Comments[encoder.LineComment] = "Custom annotations; can be used to add additional meta information"

	MetaDoc.Fields[2].AddExample("", annotationsExample)

	TestOverrideDoc.Type = "TestOverride"
	TestOverrideDoc.Comments[encoder.LineComment] = ""
	TestOverrideDoc.Description = ""

	TestOverrideDoc.AddExample("", testOverridesExample)
	TestOverrideDoc.AppearsIn = []encoder.Appearance{
		{
			TypeName:  "FTWOverrides",
			FieldName: "test_overrides",
		},
	}
	TestOverrideDoc.Fields = make([]encoder.Doc, 6)
	TestOverrideDoc.Fields[0].Name = "rule_id"
	TestOverrideDoc.Fields[0].Type = "int"
	TestOverrideDoc.Fields[0].Note = ""
	TestOverrideDoc.Fields[0].Description = "ID of the rule this test targets.\nIf this field is not empty, `test_id` must also be set."
	TestOverrideDoc.Fields[0].Comments[encoder.LineComment] = "ID of the rule this test targets."

	TestOverrideDoc.Fields[0].AddExample("", "920100")
	TestOverrideDoc.Fields[1].Name = "test_id"
	TestOverrideDoc.Fields[1].Type = "int"
	TestOverrideDoc.Fields[1].Note = ""
	TestOverrideDoc.Fields[1].Description = "ID of the test this override applies to.\nIf this field is not empty, `rule_id` must also be set."
	TestOverrideDoc.Fields[1].Comments[encoder.LineComment] = "ID of the test this override applies to."

	TestOverrideDoc.Fields[1].AddExample("", 5)
	TestOverrideDoc.Fields[2].Name = "name_regex"
	TestOverrideDoc.Fields[2].Type = "string"
	TestOverrideDoc.Fields[2].Note = ""
	TestOverrideDoc.Fields[2].Description = "Regular expression matching test names (can match multiple tests).\nIf this field is empty, `rule_id` and `test_id` must be set."
	TestOverrideDoc.Fields[2].Comments[encoder.LineComment] = "Regular expression matching test names (can match multiple tests)."

	TestOverrideDoc.Fields[2].AddExample("", "^910.*$")
	TestOverrideDoc.Fields[3].Name = "reason"
	TestOverrideDoc.Fields[3].Type = "string"
	TestOverrideDoc.Fields[3].Note = ""
	TestOverrideDoc.Fields[3].Description = "Describes why this override is necessary."
	TestOverrideDoc.Fields[3].Comments[encoder.LineComment] = "Describes why this override is necessary."

	TestOverrideDoc.Fields[3].AddExample("", reasonExample)
	TestOverrideDoc.Fields[4].Name = "expect_failure"
	TestOverrideDoc.Fields[4].Type = "bool"
	TestOverrideDoc.Fields[4].Note = ""
	TestOverrideDoc.Fields[4].Description = "Whether this test is expected to fail for this particular configuration.\nDefault: false"
	TestOverrideDoc.Fields[4].Comments[encoder.LineComment] = "Whether this test is expected to fail for this particular configuration."

	TestOverrideDoc.Fields[4].AddExample("", true)
	TestOverrideDoc.Fields[5].Name = "output"
	TestOverrideDoc.Fields[5].Type = "test.Output"
	TestOverrideDoc.Fields[5].Note = ""
	TestOverrideDoc.Fields[5].Description = "Specifies overrides on the test output"
	TestOverrideDoc.Fields[5].Comments[encoder.LineComment] = "Specifies overrides on the test output"

	TestOverrideDoc.Fields[5].AddExample("", 400)

	TESTOutputDoc.Type = "test.Output"
	TESTOutputDoc.Comments[encoder.LineComment] = " Output is the response expected from the test"
	TESTOutputDoc.Description = "Output is the response expected from the test"

	TESTOutputDoc.AddExample("", 400)
	TESTOutputDoc.AppearsIn = []encoder.Appearance{
		{
			TypeName:  "TestOverride",
			FieldName: "output",
		},
	}
	TESTOutputDoc.Fields = make([]encoder.Doc, 5)
	TESTOutputDoc.Fields[0].Name = "status"
	TESTOutputDoc.Fields[0].Type = "[]int"
	TESTOutputDoc.Fields[0].Note = ""
	TESTOutputDoc.Fields[0].Description = "description: |\n   Status describes the HTTP status error code expected as response.\n examples:\n   - name: Status\n     value: [200]"
	TESTOutputDoc.Fields[0].Comments[encoder.LineComment] = " description: |"

	TESTOutputDoc.Fields[1].Name = "response_contains"
	TESTOutputDoc.Fields[1].Type = "string"
	TESTOutputDoc.Fields[1].Note = ""
	TESTOutputDoc.Fields[1].Description = "ResponseContains describes the text that should be contained in the HTTP response."
	TESTOutputDoc.Fields[1].Comments[encoder.LineComment] = "ResponseContains describes the text that should be contained in the HTTP response."

	TESTOutputDoc.Fields[1].AddExample("ResponseContains", "Hello, World")
	TESTOutputDoc.Fields[2].Name = "log_contains"
	TESTOutputDoc.Fields[2].Type = "string"
	TESTOutputDoc.Fields[2].Note = ""
	TESTOutputDoc.Fields[2].Description = "LogContains describes the text that should be contained in the WAF logs."
	TESTOutputDoc.Fields[2].Comments[encoder.LineComment] = "LogContains describes the text that should be contained in the WAF logs."

	TESTOutputDoc.Fields[2].AddExample("LogContains", "id 920100")
	TESTOutputDoc.Fields[3].Name = "no_log_contains"
	TESTOutputDoc.Fields[3].Type = "string"
	TESTOutputDoc.Fields[3].Note = ""
	TESTOutputDoc.Fields[3].Description = "NoLogContains describes the text that should be contained in the WAF logs."
	TESTOutputDoc.Fields[3].Comments[encoder.LineComment] = "NoLogContains describes the text that should be contained in the WAF logs."

	TESTOutputDoc.Fields[3].AddExample("NoLogContains", "id 920100")
	TESTOutputDoc.Fields[4].Name = "expect_error"
	TESTOutputDoc.Fields[4].Type = "bool"
	TESTOutputDoc.Fields[4].Note = ""
	TESTOutputDoc.Fields[4].Description = "When `ExpectError` is true, we don't expect an answer from the WAF, just an error."
	TESTOutputDoc.Fields[4].Comments[encoder.LineComment] = "When `ExpectError` is true, we don't expect an answer from the WAF, just an error."

	TESTOutputDoc.Fields[4].AddExample("ExpectError", false)
}

// GetFTWOverridesDoc returns documentation for the file ./overrides_doc.go.
func GetFTWOverridesDoc() *encoder.FileDoc {
	return &encoder.FileDoc{
		Name:        "FTWOverrides",
		Description: "",
		Structs: []*encoder.Doc{
			&FTWOverridesDoc,
			&MetaDoc,
			&TestOverrideDoc,
			&TESTOutputDoc,
		},
	}
}
